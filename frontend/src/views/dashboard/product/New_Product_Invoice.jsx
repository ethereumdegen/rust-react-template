
import axios from "axios";

 
import { useState, useEffect } from 'react';
 
import { useOutletContext, useParams, useNavigate} from 'react-router-dom';

import { observer } from "mobx-react";
import {observe} from 'mobx'

 
import SignInRequiredWarning from "@/views/components/sign-in-required-warning/Main"

import { getBackendServerUrl } from '@/lib/app-helper'

import InvoicesList from "@/views/components/invoice/invoices-list/Main"

import AutoForm from '@/views/components/autoform/Main.jsx'
import InvoiceForm from '@/views/components/invoice/invoice-form/Main.jsx'


import {addInvoice} from "@/lib/invoice-lib"
import {getCurrencyTokenAddress} from 'payspec-js'

import AlertBanner from "@/views/components/alert-banner/Main";


function Main(  ) {
    
 
     
    const [web3Store] = useOutletContext(); // <-- access context value
 
 
    const [product, productSet] = useState(null) 

    const [errorMessage, errorMessageSet] = useState(null)


    const { productId } = useParams();
  
  const navigate = useNavigate();



  const fetchProduct = async () => {
   
    const backendApiUri = `${getBackendServerUrl()}/v1/product`
    let response = await axios.get(backendApiUri,{
      params:{
        productId,
        publicAddress: web3Store.account,
        authToken: web3Store.authToken 
      }
    }) 

    if(!response || !response.data ) return undefined 

    console.log({response})
    let product = response.data.data

    return product 
  }
  

   const loadProduct = async (newFilter) => {
    console.log('loading product')
       
        try{ 
          const product = await fetchProduct()
          console.log({product})

          productSet(product)
        }catch(e){
          console.error(e)
        }
   }


   
   observe(web3Store, 'account', function() {
    console.log('acct:', web3Store.account); 
  });
  
  observe(web3Store, 'authorized', function() {
    console.log('acct:', web3Store.account);
    loadProduct()
    
  });
   


  const renderError = (msg) => {   
    errorMessageSet(msg);
  }

 //load  on mount 
 useEffect(()=>{
    loadProduct()  
}, []) // <-- empty dependency array



 
/*


 payspecContractAddress: '0x...',   -- AUTOGENERATED 
  description: 'Invoice for services',
  nonce: '0x...',   -- AUTOGENERATED   
  token: '0x...',
  totalAmountDue: '1000000000000000000',
  payToArrayStringified: '["0x..."]',
  amountsDueArrayStringified: '["1000000000000000000"]',
  expiresAt: 1234567890   -- AUTOGENERATED 


*/
 

  return (
    <>
      <div className="intro-y flex flex-col sm:flex-row items-center mt-2">
       
      </div>
      <div className="intro-y box pt-4 px-5 pb-4 mt-2 flex flex-col items-center">
      
     
 

        <div className="pt-4 px-2 pb-16 w-full">
      
      
        {/* BEGIN:   Title */}
         
        <div className=" mt-2 mb-5 ">
          <div className="text-xl   my-2 ">
           Create Invoice
          </div>
          
        
        </div>
       
        {/* END: Tx Title */}
        {/* BEGIN: Tx Content */}

        <div className="w-full">

 
      <SignInRequiredWarning
        authorized={web3Store.authorized}            
      >
        Sign in to create an Invoice
      </SignInRequiredWarning> 

      
        
        {web3Store.authorized &&  
      
        <div className="flex flex-col">

         
            <div className="px-4 mb-16 text-lg font-bold">
               
            </div>
             

            <div>


              { /*  
              1. select fields dont assume a default value unfortunately 

              2. allow for removing a payment element row !!! 


              */}

          
            <InvoiceForm

              web3Store={web3Store}
              
              onSubmit={async (formData) => {
                console.log('create invoice starting with:', formData);

                let description = formData.name 

                const chainId = parseInt(formData.chainId)


                const tokenAddress = getCurrencyTokenAddress({
                  tokenName: formData.tokenName,
                  chainId
                }) 

          
                //build me !!  from formdata 
                const paymentsArray = formData.paymentRowsData
          
                console.log({paymentsArray})

                if(!paymentsArray  || !Array.isArray(paymentsArray)){
                  renderError('Must add at least one payment.')
                  throw new Error('Must add at least one payment.')
               }

                //build me !! from formdata 
                const paymentEffects = formData.effectRowsData

                console.log({paymentEffects})

                if(!paymentEffects  || !Array.isArray(paymentEffects)){
                  renderError('Must add at least one payment effect.')
                  throw new Error('Must add at least one payment effect.')
                }


                let creationResponse = await addInvoice( {

                  chainId,
                  description,

                  tokenAddress,
                  paymentsArray,

                  paymentEffects, 

                  ownerAddress: web3Store.account,
                  authToken: web3Store.authToken ,

                  /*onFinished: (invoiceUUID) => {
                    navigate(`/dashboard/invoice/${invoiceUUID}`)
                  } */

                } ) 


                console.log({creationResponse})

                if(creationResponse.success){
                  
                  let invoiceUUID = creationResponse.data 

                  navigate(`/dashboard/invoice/${invoiceUUID}`)
                }else{
                  renderError(creationResponse.error)
                  throw new Error(creationResponse.error)
                }


              }
            }
            />


            <AlertBanner
              message={errorMessage}
            />

            </div>
         
         </div>
         
         
         }
          
          

          
        </div>
            
    
        {/* END: Tx Content */}
      </div>
      </div>

    </>
  );
}

export default observer(Main);


 